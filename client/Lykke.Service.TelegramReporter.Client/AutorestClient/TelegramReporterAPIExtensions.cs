// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.TelegramReporter.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TelegramReporterAPI.
    /// </summary>
    public static partial class TelegramReporterAPIExtensions
    {
            /// <summary>
            /// Gets CML chat publishers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ChatPublisherSettingsDto> ApiV1ChatPublisherCmlchatpublishersettingsGet(this ITelegramReporterAPI operations)
            {
                return operations.ApiV1ChatPublisherCmlchatpublishersettingsGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets CML chat publishers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ChatPublisherSettingsDto>> ApiV1ChatPublisherCmlchatpublishersettingsGetAsync(this ITelegramReporterAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiV1ChatPublisherCmlchatpublishersettingsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds CML chat publisher.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatPublisher'>
            /// CML chat publisher to add.
            /// </param>
            public static ErrorResponse ApiV1ChatPublisherCmlchatpublishersettingsPut(this ITelegramReporterAPI operations, ChatPublisherSettingsPost chatPublisher = default(ChatPublisherSettingsPost))
            {
                return operations.ApiV1ChatPublisherCmlchatpublishersettingsPutAsync(chatPublisher).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds CML chat publisher.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatPublisher'>
            /// CML chat publisher to add.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ApiV1ChatPublisherCmlchatpublishersettingsPutAsync(this ITelegramReporterAPI operations, ChatPublisherSettingsPost chatPublisher = default(ChatPublisherSettingsPost), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiV1ChatPublisherCmlchatpublishersettingsPutWithHttpMessagesAsync(chatPublisher, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes CML chat publisher.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatPublisherSettingsId'>
            /// CML chat publisher settings Id
            /// </param>
            public static void ApiV1ChatPublisherCmlchatpublishersettingsDelete(this ITelegramReporterAPI operations, string chatPublisherSettingsId = default(string))
            {
                operations.ApiV1ChatPublisherCmlchatpublishersettingsDeleteAsync(chatPublisherSettingsId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes CML chat publisher.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatPublisherSettingsId'>
            /// CML chat publisher settings Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1ChatPublisherCmlchatpublishersettingsDeleteAsync(this ITelegramReporterAPI operations, string chatPublisherSettingsId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiV1ChatPublisherCmlchatpublishersettingsDeleteWithHttpMessagesAsync(chatPublisherSettingsId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets SE chat publishers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ChatPublisherSettingsDto> ApiV1ChatPublisherSechatpublishersettingsGet(this ITelegramReporterAPI operations)
            {
                return operations.ApiV1ChatPublisherSechatpublishersettingsGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets SE chat publishers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ChatPublisherSettingsDto>> ApiV1ChatPublisherSechatpublishersettingsGetAsync(this ITelegramReporterAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiV1ChatPublisherSechatpublishersettingsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds SE chat publisher.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatPublisher'>
            /// SE chat publisher to add.
            /// </param>
            public static ErrorResponse ApiV1ChatPublisherSechatpublishersettingsPut(this ITelegramReporterAPI operations, ChatPublisherSettingsPost chatPublisher = default(ChatPublisherSettingsPost))
            {
                return operations.ApiV1ChatPublisherSechatpublishersettingsPutAsync(chatPublisher).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds SE chat publisher.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatPublisher'>
            /// SE chat publisher to add.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ApiV1ChatPublisherSechatpublishersettingsPutAsync(this ITelegramReporterAPI operations, ChatPublisherSettingsPost chatPublisher = default(ChatPublisherSettingsPost), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiV1ChatPublisherSechatpublishersettingsPutWithHttpMessagesAsync(chatPublisher, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes SE chat publisher.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatPublisherSettingsId'>
            /// SE chat publisher settings Id
            /// </param>
            public static void ApiV1ChatPublisherSechatpublishersettingsDelete(this ITelegramReporterAPI operations, string chatPublisherSettingsId = default(string))
            {
                operations.ApiV1ChatPublisherSechatpublishersettingsDeleteAsync(chatPublisherSettingsId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes SE chat publisher.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='chatPublisherSettingsId'>
            /// SE chat publisher settings Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1ChatPublisherSechatpublishersettingsDeleteAsync(this ITelegramReporterAPI operations, string chatPublisherSettingsId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiV1ChatPublisherSechatpublishersettingsDeleteWithHttpMessagesAsync(chatPublisherSettingsId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IsAliveResponse IsAlive(this ITelegramReporterAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IsAliveResponse> IsAliveAsync(this ITelegramReporterAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
